!!! USER MANAGEMENT !!!.-
1) Debemos instalar un bundle el que nos va a permitir securizar nuestra app, este bundle es:
  - composer require symfony/security-bundle.

2) Este nos genera un archivo gracias a flex, dentro de config/packages/security.yaml, donde aquí es donde podemos nosotros empezar a securizar nuestra app.

3) Creamos nuestra entidad User, gracias al bundle maker, este bundle nos permite automatizar la creación de ciertos elementos, lógicas en nuestra app. Al lanzar el comando este configura gracias a flex ciertas cosas en nuestro security.yaml, y coloca en el provider que entidad y que propiedad usaremos para la obtención de usuarios en este caso escpgimos email.
  - bin/console make:user Este crea una tabla user con el role User por defecto.

4) Generar la migración una vez hecha la conexion con el db.
5) Crear usuarios, podemos hacerlo con los data fixtures que nos provee symfony 
   - composer require --dev doctrine/doctrine-fixtures-bundle => --dev dependencia de desarrollo.
   Este comando crear una carpeta dentro de src llamada DataFixture con un archivin AppFixtures.php ahí dentro podemos nosotros generar el usuarios que queremos.
   ver ejm en DataFixture/AppFixtures.php

6) Luego para poder nosotros ejecutar esta fixture debemos de lanzar el sig comando:
    - bin/console doctrine:fixtures:load.
    Por defecto este purga la base de datos existe un comando para que no purge la base de datos completa.

7) Creamos o probamos este usuario creando el form de login usando maker bundle ejm:
    - bin/console make:controller login  Ver ejm Controller/LoginController.php

8) si queremos usar twig podemos instalarlo de la sug manera:
   - composer require template ver ejm templates/login/index.html.twig

9) En nustro security.yaml debemos de indicar en el firewall main vamos a definir como los usuarios se autentican en nuestra app.
    form_login:
      login_path: login
      check_path: login

10) Podemos usar si queremos el symfony profile nos permite inspeccionar la request, mejor errores etc.
    - composer require --dev symfony/profiler-pack

  Cuando iniciamos sessión nos genera una coockie

Logout.- Pasos:
1) Creamos en nuestro security firewall main colocamos la opción logout con el path app_logout
  main:
    logout:
      path: app_logout

2) Creamos el controlador encargado de el cierre de session. (LogoutController.php)
3) Podemos ya crear un form de registro con el comando maker para esto necesitamos instalar un validador  de forms que nos pide Symfony:
   - composer require form validator => validador
   - bin/console make:registration-form => bundle
   
!!! VALIDACIÓN DE CUENTA !!!.- Esto nos ayuda a no crear cuentas falsas con correos falsos y que ingresen a nuestro sistema:

1) Instalamos:
    - composer require symfony/mailer
    - composer require symfony/google-mailer
    
2) Tenemos que configurar nuestras variables de google que tengamos cuenta para poder hacer pruebas de envios de correos. .env => MAILER_DSN=gmail://USERNAME:PASSWORD@default

3) Tenemos que instalarnos un bundle que es el que se va a encargar de verificar la email de ese usuario
    - composer require symfonycasts/verify-email-bundle
    NOTA.- debemos de lanzar de nuevo el comando de => bin/console make:registration-form para que nos vuelva a crear el form de registro pero ahora con la opcion de poder enviar la email al usuario que se registro.

4) Creamos un custom user checked para que nos permita a nosotros que el usuario no pueda iniciar session si no ha verificado la email. Lo creamos dentro de la carpeta Security/UserChecker.php

5) Debemos en el security.yaml dentro de nuestro firewall main añadimos el user checked que queremos usar, solo nos permite un solo userChecked por lo cual dentro de esta clase UserVerified deben de ir todas la excepciones que podamos y queremos meter ahí. ejm ===>
  security.yaml
  firewall:
    ..rest of code
    logout:
      path: app_logout
    user_checker: App\Security\UserChecker => here

!!! RECUPERAR CONTRASEÑA !!!.- Tenemos un bundlde también que se encarga de todo esto del recupero de la contraseña pasos:
1) Instalamos el bundle 
   - composer require symfonycasts/reset-password-bundle
   Este instala las recetas de flex necesarias.

2) Ahora lanzamos el sig comando para que genere el formulario para esto.
   - bin/console make:reset-password

3) Luego responder las preguntas, nos pide que realicemos unos pasos:
   - Crear y lanzar la migración bin/console make:migration(crea)  => bin/console d:m:m(lanza)
   - Revisar el form en src/Form que genero dos clases para poder customizar si queremos las validaciones y labes.
   - Revisar y customizar los templates que genero de twig => templates/reset_password aqui están algunos template que me genero el comando revisar los que creo si queremos customizarlos.
   - Asegurarnos que nuestros MAILER_DNS, o cuenta que usamos para enviar los correos este correctamente configurada.
   - Crear un link "forgot your password" que apunte a la ruta app_forgot_password_request en el formulario de login que tenemos.

!!! JWT !!!.- Vamos a trabajar con un bundle lexikJWTAuthenticationBundle pasos:
1) Instalamos el bundle 
   - composer require "lexik/jwt-authentication-bundle" 
   Esto también gracias a las recetas de flex este ya nos coloca la config básica que necesitamos.

2) Nos genera en nuestro archivo env 3 variables de entorno que symfony
   - el archivo con la clave secreta
   - el archivo con la clave pública
   - la frase con la que se vana firmar ellos.
   Para generar esos archivos de la clave privada y pública debemos de lanzar el sig comando
   - bin/console lexik:jwt:generate-keypair

3) En el security.yaml debemos de registrar esta forma de auth añadiendo un nuevo firewall con cualquier nombre en este caso api_login ejm

  firewalls:
    main:
      ...rest_of_code
    app_login:
      pattern: ^/api/login
      stateless: true => no alamacena la sesion
      json_login: => definimos las propiedades para definit como nos vamos a authenticar. login mediante json
          check_path: /api/login_check => path donde se va a generar el chequeo de usuario y contraseña
          success_handler: lexik_jwt_authentication.handler.authentication_success => gestiona el proceso de exito
          failure_handler: lexik_jwt_authentication.handler.authentication_failure => gestiona el proceso de exito

4) Crear otro firewall al cual esta asociado nuestra api ejm
    json_login:
      ...rest_of_code
    app_login:
        pattern: ^/api/login
        stateless: true
        json_login:
            check_path: /api/login_check
            success_handler: lexik_jwt_authentication.handler.authentication_success
            failure_handler: lexik_jwt_authentication.handler.authentication_failure
      api: => En este firewall está el cambio.
        pattern: ^/api
        stateless: true
        jwt: ~

5) Luego tenemos que configurar nuestro access control en el mismo security de la sig manera:
    access_control:
      - { path: '^/profile', roles: 'ROLE_USER' }
      ...rest_of_code
      - { path: '^/api/login', roles: 'PUBLIC_ACCESS' } => todos acceden al login.
      - { path: '^/api', roles: 'IS_AUTHENTICATED_FULLY' } => resto path api este autenticato por completo

6) Nos vamos al archivo config/routes.yaml y configuramos ese path de check login que creamos en nuestro firewall
  api_login_check:
    path: /api/login_check

OJO.- symfony cuando decide que firewall usar lo que hace es irlo recorriendo en orden y el primero que funciona es el que va usar, osea el no va a buscar el que sea más exacto.
